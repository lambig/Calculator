/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package calculator;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.fail;

import org.junit.Test;
import org.junit.experimental.runners.Enclosed;
import org.junit.runner.RunWith;

@RunWith(Enclosed.class)
public class CalculatorTest {

	public static class calc_test {

		@Test
		public void test_1() {
			String actual = Calculator.calc("1+2*3");
			assertThat(actual, is("7"));
		}

		@Test
		public void test_2() {
			String actual = Calculator.calc("(1+2) / (-3)");
			assertThat(actual, is("-1"));
		}

		@Test
		public void test_3() {
			String actual = Calculator.calc("(1-2) *3");
			assertThat(actual, is("-3"));
		}

		@Test
		public void test_4() {
			String actual = Calculator.calc("( -1*(-2)) *(-3)");
			assertThat(actual, is("-6"));
		}

		@Test
		public void test_5() {
			String actual = Calculator.calc("-2(-3)");
			assertThat(actual, is("6"));
		}

		@Test
		public void test_6() {
			String actual = Calculator.calc("(1+2) / (-7)");
			assertThat(actual, is("-0.4285714286"));
		}

		@Test
		public void test_7() {
			String actual = Calculator.calc("1*2+3");
			assertThat(actual, is("5"));
		}

		@Test
		public void test_8() {
			String actual = Calculator.calc("-1+2*3/5");
			assertThat(actual, is("0.2"));
		}

		@Test
		public void test_9() {
			String actual = Calculator.calc("-0+2*0 / 1");
			assertThat(actual, is("0"));
		}
	}

	public static class big_numbers {
		@Test
		public void test_1() {
			String actual = Calculator.calc("99999999 + 99999999");
			assertThat(actual, is("199999998"));
		}

		@Test
		public void test_2() {
			String actual = Calculator.calc("-99999999 - 99999999");
			assertThat(actual, is("-199999998"));
		}

		@Test
		public void test_3() {
			String actual = Calculator.calc("99999999*99999999");
			assertThat(actual, is("9999999800000001"));
		}

		@Test
		public void test_4() {
			String actual = Calculator.calc("( 9999999-88888888) *(-44444444)");
			assertThat(actual, is("3506172809382716"));
		}
	}

	public static class abbreviation {
		@Test
		public void test_1() {
			String actual = Calculator.calc("(1 *(- (-5)) * 4) / 2");
			assertThat(actual, is("10"));
		}

		@Test
		public void test_2() {
			String actual = Calculator.calc("(1 *(- (3 + 5)) * 4) / (-2)");
			assertThat(actual, is("16"));
		}
	}

	public static class complicated {
		@Test
		public void test_1() {
			String actual = Calculator.calc("(1 + (2+3) * 4) / (-2)");
			assertThat(actual, is("-10.5"));
		}

		@Test
		public void test_2() {
			String actual = Calculator.calc("((1 + (2+3) * 4) / (2 - 1))+ (-(-1 + 5 - 2 * 3))");
			assertThat(actual, is("23"));
		}
	}

	public static class error_cases {
		@Test
		public void invalid_character() {
			try {
				Calculator.calc("( 1-2.1) *(-3)");
				fail();
			} catch (IllegalArgumentException e) {
				assertThat(e.getMessage(), is("計算できない文字\".\"が含まれています"));
			}
		}

		@Test
		public void missing_right_parenthesis() {
			try {
				Calculator.calc("( 1-2) *(-3");
				fail();
			} catch (IllegalArgumentException e) {
				assertThat(e.getMessage(), is("閉じていない括弧があります"));
			}

		}

		@Test
		public void missing_left_parenthesis() {
			try {
				Calculator.calc("( 1-2) *(-3))");
				fail();
			} catch (IllegalArgumentException e) {
				assertThat(e.getMessage(), is("開き括弧に対して閉じ括弧が多すぎます"));
			}
		}

		@Test
		public void ends_with_operator() {
			try {
				Calculator.calc("( 1-2) *(-3)+");
			} catch (IllegalArgumentException e) {
				assertThat(e.getMessage(), is("被演算子が足りません"));
			}
		}

		@Test
		public void divide_by_zero() {
			try {
				Calculator.calc("1 / 0");
			} catch (IllegalArgumentException e) {
				assertThat(e.getMessage(), is("ゼロ除算が発生します"));
			}
		}
	}
}
